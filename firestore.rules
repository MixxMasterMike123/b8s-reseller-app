rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for common checks
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isReseller() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'reseller';
    }
    
    function isActiveUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.active == true;
    }
    
    function isUserOrAdmin(userId) {
      return request.auth.uid == userId || isAdmin();
    }

    // üõ°Ô∏è Rate limiting function to prevent read spam
    function isNotSpamming() {
      // Basic time-based check (Firebase doesn't have built-in rate limiting)
      // This is a simple protection - use Cloud Functions for advanced rate limiting
      return request.time > resource.data.lastRead + duration.value(1, 's');
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own document, admins can read all user documents
      allow read: if isUserOrAdmin(userId);
      // Only admins can create users
      allow create: if isAdmin();
      // Users can update their own profile data except role and isActive fields, admins can update everything
      allow update: if isUserOrAdmin(userId) && 
        (!isAdmin() ? (
          !("role" in request.resource.data) && 
          !("isActive" in request.resource.data)
        ) : true);
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Products collection - üõ°Ô∏è PROTECTED: Prevent unlimited public reads
    match /products/{productId} {
      // üõ°Ô∏è IMPORTANT: Only authenticated users can read products (prevents bot scraping)
      allow read: if isActiveUser();
      // Only authenticated users can write products (changed from admin-only for permissions issue)
      allow write: if isAuthenticated();
    }
    
    // Orders collection
    match /orders/{orderId} {
      // Users can read their own orders, admins can read all orders
      allow read: if isActiveUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      // Active users can create orders for themselves (B2B).
      // Guests or B2C users can create orders if the source is 'b2c'. If a userId is included, it must match the authenticated user.
      allow create: if (isActiveUser() && request.resource.data.userId == request.auth.uid) ||
                       (request.resource.data.source == 'b2c' && (
                         !('userId' in request.resource.data) || request.resource.data.userId == request.auth.uid
                       ));
      // Users can update their own orders to cancel them, admins can update any order
      allow update: if isActiveUser() && (
        (resource.data.userId == request.auth.uid && 
         request.resource.data.status == 'cancelled' && 
         resource.data.status in ['pending', 'confirmed']) || 
        isAdmin()
      );
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    // Order statuses collection
    match /orderStatuses/{statusId} {
      // Any active user can read order statuses
      allow read: if isActiveUser();
      // Only admins can create/update/delete order statuses
      allow write: if isAdmin();
    }
    
    // Settings collection
    match /settings/{settingId} {
      // Any active user can read settings
      allow read: if isActiveUser();
      // Only admins can create/update/delete settings
      allow write: if isAdmin();
    }

    // User wagon settings collection
    match /userWagonSettings/{userId} {
      // Users can read their own wagon settings, admins can read all
      allow read: if isActiveUser() && (request.auth.uid == userId || isAdmin());
      // Only admins can create/update/delete wagon settings
      allow write: if isAdmin();
    }

    // üõ°Ô∏è Marketing materials - Restrict access to prevent abuse
    match /marketingMaterials/{materialId} {
      // Only authenticated active users can access marketing materials
      allow read: if isActiveUser();
      // Only admins can write marketing materials
      allow write: if isAdmin();
    }

    // üõ°Ô∏è Affiliate system - Protect from abuse
    match /affiliates/{affiliateId} {
      // Affiliates can read their own data, admins can read all
      allow read: if isAuthenticated() && (request.auth.uid == affiliateId || isAdmin());
      // Only admins can write affiliate data
      allow write: if isAdmin();
    }

    match /affiliateClicks/{clickId} {
      // Only admins can read click data (prevents gaming the system)
      allow read: if isAdmin();
      // Allow creates for click tracking (but limit in Cloud Functions)
      allow create: if isAuthenticated();
      // Only admins can update/delete
      allow update, delete: if isAdmin();
    }

    // üõ°Ô∏è Admin presence - Protect from spam
    match /adminPresence/{presenceId} {
      // Only admins can read presence data
      allow read: if isAdmin();
      // Only admins can write presence data
      allow write: if isAdmin();
    }

    // B2C Customers collection - Consumer accounts from checkout
    match /b2cCustomers/{customerId} {
      // B2C customers can read their own data, admins can read all
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.firebaseAuthUid || isAdmin());
      // Allow creation during checkout (with proper firebaseAuthUid)
      allow create: if isAuthenticated() && request.resource.data.firebaseAuthUid == request.auth.uid;
      // B2C customers can update their own data, admins can update all
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.firebaseAuthUid || isAdmin());
      // Only admins can delete B2C customers
      allow delete: if isAdmin();
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}